// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/worker.proto

package go_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerGRPCClient is the client API for WorkerGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerGRPCClient interface {
	// gets worker status
	GetStatus(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Status, error)
	// streams from elsewhere, still gets video (frames?) after nn
	// Source is either ip (of a camera) or dir
	GetVideo(ctx context.Context, in *Source, opts ...grpc.CallOption) (WorkerGRPC_GetVideoClient, error)
	// or restreams it into the sink
	RestreamVideo(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Source, error)
}

type workerGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerGRPCClient(cc grpc.ClientConnInterface) WorkerGRPCClient {
	return &workerGRPCClient{cc}
}

func (c *workerGRPCClient) GetStatus(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/worker.Worker_gRPC/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerGRPCClient) GetVideo(ctx context.Context, in *Source, opts ...grpc.CallOption) (WorkerGRPC_GetVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkerGRPC_ServiceDesc.Streams[0], "/worker.Worker_gRPC/GetVideo", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerGRPCGetVideoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkerGRPC_GetVideoClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type workerGRPCGetVideoClient struct {
	grpc.ClientStream
}

func (x *workerGRPCGetVideoClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerGRPCClient) RestreamVideo(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Source, error) {
	out := new(Source)
	err := c.cc.Invoke(ctx, "/worker.Worker_gRPC/RestreamVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerGRPCServer is the server API for WorkerGRPC service.
// All implementations must embed UnimplementedWorkerGRPCServer
// for forward compatibility
type WorkerGRPCServer interface {
	// gets worker status
	GetStatus(context.Context, *Request) (*Status, error)
	// streams from elsewhere, still gets video (frames?) after nn
	// Source is either ip (of a camera) or dir
	GetVideo(*Source, WorkerGRPC_GetVideoServer) error
	// or restreams it into the sink
	RestreamVideo(context.Context, *Source) (*Source, error)
	mustEmbedUnimplementedWorkerGRPCServer()
}

// UnimplementedWorkerGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerGRPCServer struct {
}

func (UnimplementedWorkerGRPCServer) GetStatus(context.Context, *Request) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedWorkerGRPCServer) GetVideo(*Source, WorkerGRPC_GetVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVideo not implemented")
}
func (UnimplementedWorkerGRPCServer) RestreamVideo(context.Context, *Source) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestreamVideo not implemented")
}
func (UnimplementedWorkerGRPCServer) mustEmbedUnimplementedWorkerGRPCServer() {}

// UnsafeWorkerGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerGRPCServer will
// result in compilation errors.
type UnsafeWorkerGRPCServer interface {
	mustEmbedUnimplementedWorkerGRPCServer()
}

func RegisterWorkerGRPCServer(s grpc.ServiceRegistrar, srv WorkerGRPCServer) {
	s.RegisterService(&WorkerGRPC_ServiceDesc, srv)
}

func _WorkerGRPC_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerGRPCServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker_gRPC/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerGRPCServer).GetStatus(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerGRPC_GetVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Source)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerGRPCServer).GetVideo(m, &workerGRPCGetVideoServer{stream})
}

type WorkerGRPC_GetVideoServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type workerGRPCGetVideoServer struct {
	grpc.ServerStream
}

func (x *workerGRPCGetVideoServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkerGRPC_RestreamVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerGRPCServer).RestreamVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker_gRPC/RestreamVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerGRPCServer).RestreamVideo(ctx, req.(*Source))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerGRPC_ServiceDesc is the grpc.ServiceDesc for WorkerGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "worker.Worker_gRPC",
	HandlerType: (*WorkerGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _WorkerGRPC_GetStatus_Handler,
		},
		{
			MethodName: "RestreamVideo",
			Handler:    _WorkerGRPC_RestreamVideo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVideo",
			Handler:       _WorkerGRPC_GetVideo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/worker.proto",
}
